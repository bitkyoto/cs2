# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '3_admin.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QTableWidgetItem

class Ui_MainWindow(object):
    path = "config/matrix2.txt"
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 778)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(70, 21, 1181, 291))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(70, 350, 171, 182))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.objectInput = QtWidgets.QTextEdit(self.verticalLayoutWidget)
        self.objectInput.setObjectName("objectInput")
        self.verticalLayout.addWidget(self.objectInput)
        self.addObject = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.addObject.setObjectName("addObject")
        self.verticalLayout.addWidget(self.addObject)
        self.deleteObject = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.deleteObject.setObjectName("deleteObject")
        self.verticalLayout.addWidget(self.deleteObject)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(270, 350, 171, 299))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_2.addWidget(self.label_4)
        self.subjectName = QtWidgets.QTextEdit(self.verticalLayoutWidget_2)
        self.subjectName.setObjectName("subjectName")
        self.verticalLayout_2.addWidget(self.subjectName)
        self.label_5 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_2.addWidget(self.label_5)
        self.subjectRights = QtWidgets.QTextEdit(self.verticalLayoutWidget_2)
        self.subjectRights.setObjectName("subjectRights")
        self.verticalLayout_2.addWidget(self.subjectRights)
        self.addSubject = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.addSubject.setObjectName("addSubject")
        self.verticalLayout_2.addWidget(self.addSubject)
        self.deleteSubject = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.deleteSubject.setObjectName("deleteSubject")
        self.verticalLayout_2.addWidget(self.deleteSubject)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 330, 171, 16))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(270, 330, 171, 16))
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.renameObject = QtWidgets.QTextEdit(self.centralwidget)
        self.renameObject.setGeometry(QtCore.QRect(480, 370, 151, 87))
        self.renameObject.setObjectName("renameObject")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(480, 340, 151, 16))
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.renameObjectbutton = QtWidgets.QPushButton(self.centralwidget)
        self.renameObjectbutton.setGeometry(QtCore.QRect(480, 460, 151, 28))
        self.renameObjectbutton.setObjectName("renameObjectbutton")
        self.renameSubjectbutton = QtWidgets.QPushButton(self.centralwidget)
        self.renameSubjectbutton.setGeometry(QtCore.QRect(480, 610, 151, 28))
        self.renameSubjectbutton.setObjectName("renameSubjectbutton")
        self.renameSubject = QtWidgets.QTextEdit(self.centralwidget)
        self.renameSubject.setGeometry(QtCore.QRect(480, 520, 151, 87))
        self.renameSubject.setObjectName("renameSubject")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(480, 500, 151, 16))
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(680, 350, 171, 299))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_6 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_3.addWidget(self.label_6)
        self._3subjectName = QtWidgets.QTextEdit(self.verticalLayoutWidget_3)
        self._3subjectName.setObjectName("_3subjectName")
        self.verticalLayout_3.addWidget(self._3subjectName)
        self.label_9 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.verticalLayout_3.addWidget(self.label_9)
        self._3subjectRights = QtWidgets.QTextEdit(self.verticalLayoutWidget_3)
        self._3subjectRights.setObjectName("_3subjectRights")
        self.verticalLayout_3.addWidget(self._3subjectRights)
        self.grantBut = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.grantBut.setObjectName("grantBut")
        self.verticalLayout_3.addWidget(self.grantBut)
        self.removeBut = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.removeBut.setObjectName("removeBut")
        self.verticalLayout_3.addWidget(self.removeBut)
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(880, 350, 171, 299))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_11 = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.verticalLayout_4.addWidget(self.label_11)
        self._3_2subjectName = QtWidgets.QTextEdit(self.verticalLayoutWidget_4)
        self._3_2subjectName.setObjectName("_3_2subjectName")
        self.verticalLayout_4.addWidget(self._3_2subjectName)
        self.label_12 = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        self.label_12.setAlignment(QtCore.Qt.AlignCenter)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_4.addWidget(self.label_12)
        self._3_2subjectRights = QtWidgets.QTextEdit(self.verticalLayoutWidget_4)
        self._3_2subjectRights.setObjectName("_3_2subjectRights")
        self.verticalLayout_4.addWidget(self._3_2subjectRights)
        self.createBut = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.createBut.setObjectName("createBut")
        self.verticalLayout_4.addWidget(self.createBut)
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(1080, 350, 171, 299))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_5)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_10 = QtWidgets.QLabel(self.verticalLayoutWidget_5)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_5.addWidget(self.label_10)
        self._3_3subjectNames = QtWidgets.QTextEdit(self.verticalLayoutWidget_5)
        self._3_3subjectNames.setObjectName("_3_3subjectNames")
        self.verticalLayout_5.addWidget(self._3_3subjectNames)
        spacerItem = QtWidgets.QSpacerItem(20, 180, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem)
        self.grantAll = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.grantAll.setObjectName("grantAll")
        self.verticalLayout_5.addWidget(self.grantAll)
        self.removeAll = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.removeAll.setObjectName("removeAll")
        self.verticalLayout_5.addWidget(self.removeAll)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.addObject.clicked.connect(self.handler_addObject)
        self.deleteObject.clicked.connect(self.handler_deleteObject)
        self.addSubject.clicked.connect(self.handler_addSubject)
        self.deleteSubject.clicked.connect(self.handler_deleteSubject)
        self.renameObjectbutton.clicked.connect(self.rename_Object)
        self.renameSubjectbutton.clicked.connect(self.rename_Subject)
        self.grantAll.clicked.connect(self.grantAll_handler)
        self.removeAll.clicked.connect(self.removeAll_handler)
        self.removeBut.clicked.connect(self.remove_handler)
        self.grantBut.clicked.connect(self.grant_handler)
        self.createBut.clicked.connect(self.create_handler)
        self.config_table()
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def rename_Subject(self):
        oldname = self.subjectName.toPlainText()
        newname = self.renameSubject.toPlainText()
        self.subjectName.clear()
        self.renameSubject.clear()
        if newname.isnumeric():
            with open(self.path, "r+") as m:
                content = m.readline().split("|")
                users = [i.split("_")[0] for i in content if i != content[0]]
                print(users)
                if newname not in users and oldname in users:
                    content[users.index(oldname) + 1] = content[users.index(oldname) + 1].replace(oldname,newname)
            print(f"rename_Subject: Writing {content} to file")
            with open(self.path, "w+") as m:
                content_towrite = "|".join(content)
                print(f"rename_Subject: Writing {content_towrite} to file")
                m.writelines(content_towrite)
                m.close()
        self.config_table()

    def create_handler(self):
        subject = self._3_2subjectName.toPlainText()
        rights = self._3_2subjectRights.toPlainText()
        self._3_2subjectRights.clear()
        self._3_2subjectName.clear()
        if subject.isnumeric():
            with open(self.path, "r+") as m:
                content = m.readline().split("|")
                users = [i.split("_")[0] for i in content if i != content[0]]
                files = content[0]
                if subject in users:
                    for r in rights:
                        if r.isalpha():
                            if r not in files:
                                content[0] = content[0] + r
                            if r not in content[users.index(subject) + 1]:
                                content[users.index(subject) + 1] = content[users.index(subject) + 1] + r
                else:
                    content.append(f"{subject}_")
                    users.append(subject)
                    for r in rights:
                        if r.isalpha():
                            if r not in files:
                                content[0] = content[0] + r
                            content[users.index(subject)+1] = content[users.index(subject)+1] + r
            print(f"create_handler: Writing {content} to file")
            with open(self.path, "w+") as m:
                content_towrite = "|".join(content)
                print(f"create_handler: Writing {content_towrite} to file")
                m.writelines(content_towrite)
                m.close()
        self.config_table()

    def grantAll_handler(self):
        subjects = self._3_3subjectNames.toPlainText()
        subjects = subjects.split(" ")
        self._3_3subjectNames.clear()
        with open(self.path, "r+") as m:
            content = m.readline().split("|")
            users = [i.split("_")[0] for i in content if i != content[0]]
            files = content[0]
            for sub_name in subjects:
                if sub_name in users:
                    content[users.index(sub_name) + 1] = sub_name + "_" + files
                else:
                    print(f"grantAll_handler: User {sub_name} doesn't exist")

        print(f"grantAll_handler: Writing {content} to file")
        with open(self.path, "w+") as m:
            content_towrite = "|".join(content)
            print(f"grantAll_handler: Writing {content_towrite} to file")
            m.writelines(content_towrite)
            m.close()
        self.config_table()

    def remove_handler(self):
        subjects = self._3subjectName.toPlainText()
        rights = self._3subjectRights.toPlainText()
        self._3subjectName.clear()
        self._3subjectRights.clear()
        subjects = subjects.split(" ")
        with open(self.path, "r+") as m:
            content = m.readline().split("|")
            files = content[0]
            users = [i.split("_")[0] for i in content if i != content[0]]
            for sub_name in subjects:
                if sub_name in users:
                    for r in rights:
                        if r in files:
                            content[users.index(sub_name) + 1] = content[users.index(sub_name) + 1].replace(r,"")
                        else:
                            print(f"remove_handler: File {r} doesn't exist")
                else:
                    print(f"remove_handler: User {sub_name} doesn't exist")

        #print(f"remove_handler: Writing {content} to file")
        with open(self.path, "w+") as m:
            content_towrite = "|".join(content)
            print(f"remove_handler: Writing {content_towrite} to file")
            m.writelines(content_towrite)
            m.close()
        self.config_table()

    def grant_handler(self):
        subjects = self._3subjectName.toPlainText()
        rights = self._3subjectRights.toPlainText()
        self._3subjectName.clear()
        self._3subjectRights.clear()
        subjects = subjects.split(" ")
        with open(self.path, "r+") as m:
            content = m.readline().split("|")
            files = content[0]
            users = [i.split("_")[0] for i in content if i != content[0]]
            for sub_name in subjects:
                if sub_name in users:
                    for r in rights:
                        if r in files and r not in content[users.index(sub_name) + 1]:
                            content[users.index(sub_name) + 1] = content[users.index(sub_name) + 1] + r
                        else:
                            print(f"grant_handler: File {r} doesn't exist or is already being owned by subject")
                else:
                    print(f"grant_handler: User {sub_name} doesn't exist")

        # print(f"remove_handler: Writing {content} to file")
        with open(self.path, "w+") as m:
            content_towrite = "|".join(content)
            print(f"grant_handler: Writing {content_towrite} to file")
            m.writelines(content_towrite)
            m.close()
        self.config_table()


    def removeAll_handler(self):
        subjects = self._3_3subjectNames.toPlainText()
        self._3_3subjectNames.clear()
        subjects = subjects.split(" ")
        with open(self.path, "r+") as m:
            content = m.readline().split("|")
            users = [i.split("_")[0] for i in content if i != content[0]]
            for sub_name in subjects:
                if sub_name in users:
                    content[users.index(sub_name) + 1] = sub_name + "_"
                else:
                    print(f"removeAll_handler: User {sub_name} doesn't exist")

        print(f"removeAll_handler: Writing {content} to file")
        with open(self.path, "w+") as m:
            content_towrite = "|".join(content)
            print(f"removeAll_handler: Writing {content_towrite} to file")
            m.writelines(content_towrite)
            m.close()
        self.config_table()

    def rename_Object(self):
        oldname = self.objectInput.toPlainText()
        newname = self.renameObject.toPlainText()
        self.objectInput.clear()
        self.renameObject.clear()
        if newname.isalpha() and len(newname) == 1:
            with open(self.path, "r+") as m:
                content = m.readline().split("|")
                if oldname in content[0] and newname not in content[0]:
                    content[0] = content[0].replace(oldname,newname)
                    for i in range(len(content)):
                        content[i] = content[i].replace(oldname,newname)
                else:
                    print(f"Some error during renaming")
                m.close()
            with open(self.path, "w+") as m:
                content_towrite = "|".join(content)
                print(f"rename_Object: Writing {content_towrite} to file")
                m.writelines(content_towrite)
            self.config_table()
    def handler_addObject(self):
        obj_name = self.objectInput.toPlainText()
        self.objectInput.clear()
        if(obj_name.isalpha() and len(obj_name)==1):
            with open(self.path, "r+") as m:
                content = m.readline().split("|")
                if obj_name not in content[0]:
                    content[0] = content[0] + obj_name
                else:
                    print(f"add_Object: {obj_name} already exists")
                m.close()
            with open(self.path, "w+") as m:
                content_towrite = "|".join(content)
                print(f"add_Object: Writing {content_towrite} to file")
                m.writelines(content_towrite)
        self.config_table()

    def handler_deleteObject(self):
        obj_name = self.objectInput.toPlainText()
        self.objectInput.clear()
        with open(self.path, "r+") as m:
            content = m.readline().split("|")
            if obj_name in content[0]:
                content[0] = content[0].replace(obj_name, "")
                for i in range(len(content)):
                    content[i] = content[i].replace(obj_name,"")
            m.close()
        with open(self.path, "w+") as m:
            content_towrite = "|".join(content)
            print(f"add_Object: Writing {content_towrite} to file")
            m.writelines(content_towrite)
            m.close()
        self.config_table()

    def handler_addSubject(self):
        sub_name = self.subjectName.toPlainText()
        new_rights = self.subjectRights.toPlainText()
        self.subjectName.clear()
        self.subjectRights.clear()
        if sub_name.isnumeric():
            with open(self.path, "r+") as m:
                content = m.readline().split("|")
                users = [i.split("_")[0] for i in content if i != content[0]]
                print(users)
                if sub_name in users:
                    content[users.index(sub_name) + 1] = sub_name + "_" + new_rights
                else:
                    content.append(sub_name + "_" + new_rights)
            print(f"add_Subject: Writing {content} to file")
            with open(self.path, "w+") as m:
                content_towrite = "|".join(content)
                print(f"add_Object: Writing {content_towrite} to file")
                m.writelines(content_towrite)
                m.close()
        self.config_table()

    def handler_deleteSubject(self):
        sub_name = self.subjectName.toPlainText()
        new_rights = self.subjectRights.toPlainText()
        self.subjectName.clear()
        self.subjectRights.clear()
        with open(self.path, "r+") as m:
            content = m.readline().split("|")
            users = [i.split("_")[0] for i in content if i != content[0]]
            if sub_name in users:
                print(f"Удаляем {content[users.index(sub_name) + 1]}")
                content.pop(users.index(sub_name) + 1)
            else:
                print(f"delete_Subject: User {sub_name} doesn't exist")
        with open(self.path, "w+") as m:
            content_towrite = "|".join(content)
            print(f"delete_Subject: Writing {content} to file")
            m.writelines(content_towrite)
            m.close()
        self.config_table()

    def config_table(self):
        with open(self.path, "r+") as m:
            print("Opened file")
            content = m.readline().split("|")
            amount_files = len(content[0])
            amount_subjects = len(content) - 1
            filenames = [i for i in content[0]]
            users = [i.split("_")[0] for i in content if i != content[0]]
            self.tableWidget.setColumnCount(amount_files)
            self.tableWidget.setRowCount(amount_subjects)
            self.tableWidget.setHorizontalHeaderLabels(filenames)
            self.tableWidget.setVerticalHeaderLabels(users)
            print("Content of matrix", content)
            for row in range(self.tableWidget.rowCount()):
                for col in range(self.tableWidget.colorCount()):
                    self.tableWidget.setItem(row, col, QTableWidgetItem(""))
            for i in range(1, len(content)):
                user, user_rights = content[i].split("_")
                for sym in user_rights:
                    if sym in filenames:
                        index = filenames.index(sym)
                        self.tableWidget.setItem(users.index(user), index, QTableWidgetItem("+"))
            self.tableWidget.update()
            m.close()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "Имя объекта"))
        self.addObject.setText(_translate("MainWindow", "Добавить"))
        self.deleteObject.setText(_translate("MainWindow", "Удалить"))
        self.label_4.setText(_translate("MainWindow", "Имя субъекта"))
        self.label_5.setText(_translate("MainWindow", "Права субъекта"))
        self.addSubject.setText(_translate("MainWindow", "Добавить / Изменить"))
        self.deleteSubject.setText(_translate("MainWindow", "Удалить"))
        self.label.setText(_translate("MainWindow", "Управление объектом"))
        self.label_2.setText(_translate("MainWindow", "Управление субъектом"))
        self.label_7.setText(_translate("MainWindow", "Переименовать объект"))
        self.renameObjectbutton.setText(_translate("MainWindow", "Переименовать"))
        self.renameSubjectbutton.setText(_translate("MainWindow", "Переименовать"))
        self.label_8.setText(_translate("MainWindow", "Переименовать субъект"))
        self.label_6.setText(_translate("MainWindow", "Имена субъектов"))
        self.label_9.setText(_translate("MainWindow", "Права субъектов"))
        self.grantBut.setText(_translate("MainWindow", "Grant"))
        self.removeBut.setText(_translate("MainWindow", "Remove"))
        self.label_11.setText(_translate("MainWindow", "Имя субъекта"))
        self.label_12.setText(_translate("MainWindow", "Права субъекта"))
        self.createBut.setText(_translate("MainWindow", "Create"))
        self.label_10.setText(_translate("MainWindow", "Имена субъектов"))
        self.grantAll.setText(_translate("MainWindow", "Grant all"))
        self.removeAll.setText(_translate("MainWindow", "Remove all"))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    main_window = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(main_window)
    main_window.show()
    sys.exit(app.exec())